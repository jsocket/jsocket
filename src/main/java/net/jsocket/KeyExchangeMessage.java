package net.jsocket;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;

/**
 * Used during the handshake by the client to send the RSA encrypted AES key
 */
public class KeyExchangeMessage implements Message {
    private static final String instance = "RSA/ECB/PKCS1Padding";
    private final byte[] encryptedSymmetricKey;

    /**
     * Initialises this KeyExchangeMessage and encrypts the symmetric AES key using an RSA keypair generated by the server
     *
     * @param symmetricKey The symmetric key to be transported, should be used by the client and the server during the communication
     * @param publicKey    The server's public key used to encrypt the symmetric AES key
     * @throws BadPaddingException Thrown when an incorrect (as in wrong length/format) key is passed as the symmetricKey
     */
    public KeyExchangeMessage(SecretKey symmetricKey, PublicKey publicKey) throws BadPaddingException {
        byte[] esk = new byte[1];
        try {
            Cipher cipher = Cipher.getInstance(instance);
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            esk = cipher.doFinal(symmetricKey.getEncoded());
        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
            System.out.println("This exception should not have happened...");
        } catch (InvalidKeyException | IllegalBlockSizeException e) {
            //TODO Exception handling
            e.printStackTrace();
        }
        this.encryptedSymmetricKey = esk;
    }

    /**
     * Decrypts the stored AES key and returns it
     *
     * @param privateKey The server's private key for this client
     * @return The decrypted AES key
     * @throws BadPaddingException Thrown when an incorrect (as in wrong length/format) key is passed as the symmetricKey
     * @throws InvalidKeyException Thrown when an incorrect (as in wrong data) key is passed as the symmetricKey
     */
    public SecretKey getSymmetricKey(PrivateKey privateKey) throws BadPaddingException, InvalidKeyException {
        try {
            Cipher cipher = Cipher.getInstance(instance);
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decr = cipher.doFinal(encryptedSymmetricKey);
            return new SecretKeySpec(decr, 0, decr.length, "AES");
        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
            System.out.println("This exception should not have happened...");
        } catch (IllegalBlockSizeException e) {
            //TODO Exception handling
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public String getDescription() {
        return "Key Exchange Message";
    }
}
